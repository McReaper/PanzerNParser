/* Michael PÃ‰RIN, Verimag / Univ. Grenoble Alpes, may 2018
 *
 * A JavaCC parser for automata
 *
 * The parser produces an ast in the dot format for Graphviz
 *
 * Use the Graphviz viewer available at (https://graphviz.gitlab.io)
 * to get a graphical view of the resulting ast
 */

options
{
  //other options
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  STATIC = false;
}

PARSER_BEGIN(AutomataParser)

package info3.game.automata.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import info3.game.automata.ast.* ;
import info3.game.automata.util.* ;

public class AutomataParser {

  public static AST from_file(String path_file) throws Exception
  {
    AST ast = new AutomataParser(new BufferedReader(new FileReader(path_file))).Run();
    return ast;
  }

  public static AST from_string(String input) throws Exception
  {
    AST ast = new AutomataParser(new java.io.StringReader(input)).Run();
    return ast;
  }

  public static boolean option(String option, String [] args)
  {
    int i = 0 ;
    while (i < args.length){
      if (args [i].equals(option)){ return true; }
      i++;
    }
    return false;
  }

  
  public static int index_of_input(String[] args) {
    // find the input among the options of the command line
    	int i = 0 ;
    	while (i<args.length) {
    	  if ( (   args[i].equals("-ast")
    	  	 	|| args[i].equals("-string")
    	  	 	|| args[i].equals("-aut")
    	  	 	|| args[i].equals("-file") ) == false )
     	    { return i ; }
          else
     	    { i++ ; }
   	}
  	return 0 ;
  }
  
  public static void main(String[] args) throws Exception {
        AST ast;
        int i = index_of_input(args) ;
        if ( option("-string",args) )
            ast = from_string(args[i]) ;
        else
            ast = from_file(args[i]) ;

 		if ( option("-ast",args) ) {
          	AstPrinter ast_printer = new AstPrinter();
          	ast.accept(ast_printer);
            System.out.println("// THE AST of the PARSED AUTOMATA in DOT FORMAT \n");
            System.out.println(ast_printer.to_dot());
        }
        if ( option("-aut",args) ) {         
            System.out.println("// THE AUTOMATA in DOT FORMAT \n"); 
			new AutPrinter(System.out, ast);
      	}
      	/*
        if ( option("-AST",args) ) {
          	ASTPrinter ast_printer = new ASTPrinter();
          	ast.accept(ast_printer);
            System.out.println("// THE AST of the PARSED AUTOMATA in DOT FORMAT \n");
            System.out.println(ast_printer.to_dot());
        }
        if ( option("-AUT",args) ) {         
            System.out.println("// THE AUTOMATA in DOT FORMAT \n"); 
			AutomataPrinter v = new AutomataPrinter();
			v.print(System.out, ast);
      	}
      	*/ 

	}
}
PARSER_END(AutomataParser)


SKIP:  { " " | "\t" | "\n" | "\r" }

TOKEN: { < CONDITION: "True" | "Key" | "MyDir" | "Cell" | "Closest" | "GotPower" | "GotStuff" > }

TOKEN: { < ACTION: "Egg" | "Explode" | "Get" | "Hit" | "Jump" | "Kamikaze" | "Move" | "Pick" | "Pop" | "Power" | "Protect" | "Store" | "Throw" | "Turn" | "Wizz" | "Wait"> }

TOKEN : { < SPECIAL_KEY: "SPACE" | "ENTER" | "FU" | "FD" | "FL" | "FR" > }

TOKEN: { < DIRVAR: "d" > }

TOKEN: { < ENTVAR: "e" > }

TOKEN: { < DIRECTION: "H" | "N" | "S" | "E" | "W" | "F" | "B" | "L" | "R" | "NE" | "SE" | "SW" | "NW" > }

TOKEN: { < CATEGORY: "A" | "C" | "D" | "G" | "J" | "M" | "O" | "P" | "T" | "V" | "@" > }

TOKEN: { < #CAPITAL: ["A"-"Z"] > }

TOKEN: { < LOWERCASE: ["a"-"z"] > }

TOKEN: { < #LETTER: (<CAPITAL> | <LOWERCASE>) >  }

TOKEN: { < #DIGIT: ["0"-"9"] > } 

TOKEN:
{ < UNARY: "!" > }

TOKEN:
{ <  BINOP: "&" | "/" > }

TOKEN:
{ < ID: <CAPITAL> (<LETTER>|<DIGIT>|"_")* > }

TOKEN:
{ < INT: (<DIGIT>)+ > }
   


// THE PARSER

/**
 ** See package ast for the definitions of types returned by Parsers
 **/

/* Identifier */
String P_Identifier():
{ Token token; }
{
  token=<ID> { return token.image; }
}


/* Direction
 * | "N" | "S" | "W" | "E" | "F" | "B" | "L" | "R"
 * | "d"
 */
Direction P_Direction():
{ Token token; }
{
  token=<DIRECTION> { return new Direction(new Terminal(token.image)); }
| token=<DIRVAR>    { return new Direction(new Terminal(token.image)); }   
}


/* Category
 * | "A" | "C" |"D" | "G" | "J" | "M" | "O" | "P" | "T" | "V" | "@"  
 * | "e"
 * | "_"
 */
Category P_Category(): 
{ Token token; }
{
  token = <CATEGORY>
  	{ return new Category(new Terminal(token.image)); }

| token = <ENTVAR>
	{ return new Category(new Terminal(token.image)); }

| "_"
	{ return new Category(new Terminal("_")); }
}

 
/* Run
 * | Some_Automata . <EOF>
 */
AST Run():
{ List<Automaton> automata ; }
{
  automata = P_Some_Automata( new LinkedList<Automaton>() )
  <EOF>
   	{ return new AST(automata) ; }
}


/* Some_Automata
 * | Automaton . Some_Automata
 * | epsilon
 */
List<Automaton> P_Some_Automata(List<Automaton> input_list):
{ Automaton aut ; List<Automaton> list ; }
{
  aut  = P_Automaton()
  list = P_Some_Automata(input_list) 
    	{ list.add(0,aut) ; return list ; }

| // epsilon
	{ return input_list ; }
}


/* Automaton
 * | Identifier . "(" . Identifier . ")" . "{" . At_least.one_Mode . "}"
 */
Automaton P_Automaton():
{ String name ; String entry_state ; List<Mode> modes ; }
{
  name = P_Identifier()
  "("
  entry_state = P_Identifier()
  ")"
  "{"
  modes = P_At_least_one_Mode( new LinkedList<Mode>() ) 
  "}"
  	{ return new Automaton(name, new State(entry_state), modes) ; }
}


/* At_least.one_Mode
 * | Mode . Some_Mode
 */

List<Mode> P_At_least_one_Mode(List<Mode> input_list):
{ Mode mode ; List<Mode> list ; }
{
  mode = P_Mode()
  list = P_Some_Mode(input_list)
  	{ list.add(0,mode) ; return list ; }
}


/* Some_Mode
 * | At_least.one_Mode
 * | epsilon
 */

List<Mode> P_Some_Mode(List<Mode> input_list):
{ List<Mode> list ; }
{
  list = P_At_least_one_Mode(input_list)
	{ return list ; }

| // epsilon
	{ return input_list ; }
}



/* Mode
 * | "*" . State . Opt_TwoPoints . Behaviour
 */
Mode P_Mode():
{ State state;
  Mode mode;
  Behaviour behaviour;
}
{
  "*"
  state = P_State()
  P_Opt_TwoPoints()
  behaviour = P_Behaviour() 
  	{ return new Mode(state,behaviour) ; }
}



/* State
 * | "(" . State_Identifier . ")"
 */
State P_State():
{ String name ; }
{
  "("
  name = P_State_Identifier()
  ")" 
  	{ return new State(name); }
}



/* State_Identifier
 * | Identifier
 * | "_"
 * | epsilon
 */
String P_State_Identifier():
{ String name ; }
{
  name = P_Identifier()  
  	{ return name; }
| "_"
   	{ return "_"; }
| // epsilon
   	{ return ""; } 
}



/* Opt_TwoPoints
 * | ":" 
 * | epsilon
 */
Void P_Opt_TwoPoints():
{}
{
  ":"
	{ return null; }

| // epsilon
	{ return null; }
}



/* Behaviour
 * | Some_Transitions
 */  
Behaviour P_Behaviour():
{ List<Transition> transitions ; }
{
  transitions = P_Some_Transitions(new LinkedList<Transition>())
  	{ return new Behaviour(transitions); }
}



/* Some_Transitions
 * | Transition . Some_Transitions 
 * | epsilon
 */
List<Transition> P_Some_Transitions(List<Transition> input_list):
{ Transition transition ; List<Transition> list ; }
{
  transition = P_Transition()
  list = P_Some_Transitions(input_list)
   	{ list.add(0,transition) ; return list ; } 

| // epsilon  
   	{ return input_list ; }
}

  
/* Transition
 * | Opt_Bar . Condition . "?" . Opt_Action . ":" . State
 */
Transition P_Transition():
{ Condition condition ; Action action ; State state ; }
{
  P_Opt_Bar()
  condition = P_Condition() 
  "?"
  action = P_Opt_Action() 
  ":"
  state = P_State()
  	{ return new Transition(condition,action,state) ; }
}  


/*  Opt_Bar
 *  | "|"
 *  | epsilon
 */
Void P_Opt_Bar():
{ }
{ "|"         { return null; }
| /*epsilon*/ { return null; }
}  


/*  Condition
 *  | Expression
 */    
Condition P_Condition():
{ Expression expression ; }
{ expression = P_Expression()
	{ return new Condition(expression) ; }
}


/*  Opt_Action
 *  | Choices
 *  | epsilon
*/    
Action P_Opt_Action():
{ List<FunCall> choices ; }
{
  choices = P_Choices( new LinkedList<FunCall>() )
  	{ return new Action(choices) ; }

| // epsilon
	{ return new Action( new LinkedList<FunCall>() ); } 
}


/*  Choices
 *  | Probabilistic_Action . Opt_More_Choices
 */
List<FunCall> P_Choices(List<FunCall> input_choices):
{ FunCall p_action ;  List<FunCall> choices; }
{
  p_action = P_Probabilistic_Action()
  choices = P_Opt_More_Choices(input_choices)
  	  { choices.add(0,p_action) ; return choices; }
}


/*  Opt_More_Choices
 *  | <BINOP> . Choices
 *  | epsilon
 */
List<FunCall> P_Opt_More_Choices(List<FunCall> input_choices):
{ List<FunCall> choices ; }
{
  <BINOP>
  choices = P_Choices(input_choices)
     { return choices; }
     
| //epsilon
 	 { return input_choices; }
}

/* Probabilistic_Action
 * | Percent . ACTION . Opt_Parameters
 * |           ACTION . Opt_Parameters
 */
FunCall P_Probabilistic_Action():
{ int percent ; Token action ; List<Parameter> parameters = new LinkedList<Parameter >(); }
{
  percent = P_Percent()
  action = <ACTION>
  parameters = P_Opt_Parameters( parameters )
  	{ return new FunCall(percent, action.image, parameters) ; }

| action = <ACTION>
  parameters = P_Opt_Parameters( parameters )
  	{ return new FunCall(action.image, parameters) ; }	
}
  

/* Michael > OLD VERSION 7/04/2020
 *  Opt_Action
 *  | ACTION . Opt_Parameters
 *  | ""
  
Action OLD_P_Opt_Action():
{ Token token ; List<Parameter> parameters = new LinkedList<Parameter>() ; }
{ token = <ACTION>
  parameters = P_Opt_Parameters( parameters )
  	{ return new Action(new FunCall(token.image, parameters)) ; }
| //epsilon
	{ return null; } 
}
*/
	   
  
/* Expression
   | "(" . Expression . ")" . Op_Expression
   | <UNARYOP> . Expression 
   | FunCall . Op_Expression
*/
Expression P_Expression():
{ Expression expression ; Token token ; FunCall funcall ; }
{ "("
  expression = P_Expression()
  ")"
  expression = P_Op_Expression(expression)
  	{ return expression ; } 	

| token = <UNARY>
  expression = P_Expression()
	{ return new UnaryOp(token.image,expression) ; }
	
| funcall = P_FunCall()
  expression = P_Op_Expression(funcall)
  	{ return expression ; }
}


/* Op_Expression
   | <BINOP> . Expression
   | epsilon
*/
Expression P_Op_Expression(Expression e1):
{ Token token ; Expression e2 ; }
{
  token = <BINOP>
  e2 = P_Expression()
 	{ return new BinaryOp(token.image,e1,e2) ; }

| // epsilon
  	{ return e1 ; }
}


/* FunCall
 * | "Key(" . KeyName . ")"  // Special case for the "Key" condition which has a fixed arity
 * | CONDITION . Opt_Parameters
 */
FunCall P_FunCall():
{ Token token ; List<Parameter> parameters = new LinkedList<Parameter>() ; Key key ; int percent ; }
{
  "Key("
  key = P_Key_Name()	
  ")"
   	{ parameters.add(key) ; return new FunCall("Key", parameters) ; }
   	
| token = <CONDITION>
  parameters = P_Opt_Parameters( parameters )
  	{ return new FunCall(token.image, parameters) ; }	
}


/* Percent
 * | INT . %
 */
int P_Percent():
{ Token token ; }
{
  token = <INT> "%"
  	{ return Integer.parseInt(token.image); }
}
  

/* KeyName
 * | INT
 * | LOWERCASE
 * | DIRVAR | ENTVAR
 * | SPECIAL_KEY
 * | "_"
 */
Key P_Key_Name():
{ Token token ; }
{
  token = <INT>
	{ return new Key(new Terminal(token.image)) ; }

| token = <LOWERCASE>
	{ return new Key(new Terminal(token.image)) ; }

| token = <DIRVAR>
	{ return new Key(new Terminal(token.image)) ; }

| token = <ENTVAR>
	{ return new Key(new Terminal(token.image)) ; }

| token = <SPECIAL_KEY>
	{ return new Key(new Terminal(token.image)) ; }

| "_"
	{ return new Key(new Terminal("_")) ; }
	
}


     
/* Opt_Parameters
 * | "(" Some_Parameters ")"
 * | epsilon
 */
List<Parameter> P_Opt_Parameters(List<Parameter> input_list):
{ List<Parameter> list ; }
{
  "("
  list = P_Some_Parameters(input_list)
  ")"
  	{ return list ; }

|  // epsilon
	{ return input_list ; }
}


/* Some_Parameters
 * | Parameter  More_Parameters
 * | epsilon
 */
List<Parameter> P_Some_Parameters(List<Parameter> input_list):
{ Parameter parameter ; List<Parameter> list ; }
{
  parameter = P_Parameter()
  list = P_More_Parameters(input_list) 
  	{ list.add(0,parameter) ; return list ; }

|  // epsilon
	{ return input_list ; }
}


/* More_Parameters
 * | ","  Parameter  More_Parameters 
 * | epsilon
 */
List<Parameter> P_More_Parameters(List<Parameter> input_list):
{ Parameter parameter ; List<Parameter> list ; }
{
  ","
  parameter = P_Parameter()
  list = P_More_Parameters(input_list) 
  	{ list.add(0,parameter) ; return list ; }

|  // epsilon
	{ return input_list ; }
}


     
/* Parameters
 * | Direction
 * | Category
 * | Integer
 */
Parameter P_Parameter():
{ Token token ; Parameter parameter ; }
{
  parameter = P_Direction()
	{ return parameter ; }
 
| parameter = P_Category()
	{ return parameter ; }

| token = <INT>
	{ return new Value(Integer.parseInt(token.image)) ; }
}


	
	  
